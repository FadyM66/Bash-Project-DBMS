insert_into_table() {
    local DBName="$1"
    local TableName="$2"

    # Check if the database and table exist
    if [[ ! -f "Database/$DBName/${TableName}_metaData" || ! -f "Database/$DBName/${TableName}" ]]; then
        echo "Error: Database or table not found."
        return
    fi

    local numOfFields
    numOfFields=$(awk -F: 'END {print NR}' "Database/$DBName/${TableName}_metaData")
    local Name
    local DataType
    local PK

    # Read field names, data types, and primary key information
    Name=($(awk -F: '{print $1}' "Database/$DBName/${TableName}_metaData"))
    DataType=($(awk -F: '{print $2}' "Database/$DBName/${TableName}_metaData"))
    PK=($(awk -F: '{print ($3 == "" ? "x" : $3)}' "Database/$DBName/${TableName}_metaData"))

    for ((i = 0; i < numOfFields; i++)); do
        while true; do
            read -p "Enter value for ${Name[$i]}: " FieldName

            # Validate integer data type
            if [[ ${DataType[$i]} == "int" ]]; then
                checkValue=$(check_is_int "$FieldName")
                if [[ $checkValue == 1 ]]; then
                    echo "Invalid input. Please enter an integer for ${Name[$i]}."
                    continue
                fi
            elif [[ ${DataType[$i]} == "string" ]]; then
                # Replace spaces with underscores for string fields
                FieldName=$(tr -s ' ' '_' <<< "$FieldName")
            fi

            # Handle primary key uniqueness check
            if [[ ${PK[$i]} == "pk" ]]; then
                flag=0
                values=($(awk -F: -v col=$((i+1)) '{print $col}' "Database/$DBName/$TableName"))
                for value in "${values[@]}"; do
                    if [[ $FieldName == $value ]]; then
                        flag=1
                        break
                    fi
                done

                if [[ $flag == 1 ]]; then
                    echo "Error: Value for ${Name[$i]} must be unique. It is a primary key."
                    continue
                fi
            fi

            # Append field value to the table
            if [[ $i == 0 ]]; then
                echo -n "$FieldName" >> "Database/$DBName/${TableName}"
            else
                echo -n ":$FieldName" >> "Database/$DBName/${TableName}"
            fi

            break
        done
    done

    # Add a newline at the end of the record
    echo "" >> "Database/$DBName/${TableName}"
    echo "Record inserted successfully."
}
#############################################OLD###########################################

# insert_into_table() {
#     # local DBName="$1"
#     # local TableName="$2"

#     local DBName="db1"
#     local TableName="t1"

#     # Check if the database and table exist
#     if [[ ! -f "$DBName/${TableName}_metaData" || ! -f "$DBName/${TableName}" ]]; then
#         echo "Error: Database or table not found."
#         return
#     fi

#     local numOfFields
#     numOfFields=$(awk -F: 'END {print NR}' "$DBName/${TableName}_metaData")
#     local Name
#     local DataType
#     local PK

#     # Read field names, data types, and primary key information
#     Name=($(awk -F: '{print $1}' "$DBName/${TableName}_metaData"))
#     DataType=($(awk -F: '{print $2}' "$DBName/${TableName}_metaData"))
#     PK=($(awk -F: '{print ($3 == "" ? "x" : $3)}' "$DBName/${TableName}_metaData"))

#     for ((i = 0; i < numOfFields; i++)); do
#         while true; do
#             read -p "Enter value for ${Name[$i]}: " FieldName

#             # Validate integer data type
#             if [[ ${DataType[$i]} == "int" ]]; then
#                 checkValue=$(check_is_int "$FieldName")
#                 if [[ $checkValue == 1 ]]; then
#                     echo "Invalid input. Please enter an integer for ${Name[$i]}."
#                     continue
#                 fi
#             elif [[ ${DataType[$i]} == "string" ]]; then
#                 # Replace spaces with underscores for string fields
#                 FieldName=$(tr -s ' ' '_' <<< "$FieldName")
#             fi

#             # Handle primary key uniqueness check
#             if [[ ${PK[$i]} == "pk" ]]; then
#                 flag=0
#                 values=($(awk -F: -v col=$((i+1)) '{print $col}' "$DBName/$TableName"))
#                 for value in "${values[@]}"; do
#                     if [[ $FieldName == $value ]]; then
#                         flag=1
#                         break
#                     fi
#                 done

#                 if [[ $flag == 1 ]]; then
#                     echo "Error: Value for ${Name[$i]} must be unique. It is a primary key."
#                     continue
#                 fi
#             fi

#             # Append field value to the table
#             if [[ $i == 0 ]]; then
#                 echo -n "$FieldName" >> "$DBName/${TableName}"
#             else
#                 echo -n ":$FieldName" >> "$DBName/${TableName}"
#             fi

#             break
#         done
#     done

#     # Add a newline at the end of the record
#     echo "" >> "$DBName/${TableName}"
#     echo "Record inserted successfully."
# }






# #!/bin/bash

# # Function to insert data into a table
# insert_into_table() {
#     local db_path=$1

#     # Check if the provided path is a directory
#     if ! dir_exists "$db_path"; then
#         echo "Invalid database path '$db_path'."
#         return
#     fi

#     cd "$db_path" || {
#         echo "Failed to navigate to database directory."
#         return
#     }

#     # List tables in the selected database
#     echo "Available tables:"
#     ls
#     read -p "Enter the table name to insert data into: " tablename

#     if ! file_exists "$tablename"; then
#         echo "Table '$tablename' does not exist."
#         cd ..
#         return
#     fi

#     # Read the table schema
#     local schema
#     schema=$(head -n 1 "$tablename")
#     IFS=';' read -r -a columns <<<"$schema"

#     declare -A data
#     local primary_key=""
#     local primary_key_value=""

#     # Identify the primary key from the schema
#     for col in "${columns[@]}"; do
#         if [[ "$col" == primary_key:* ]]; then
#             primary_key=$(echo "$col" | cut -d: -f2)
#         fi
#     done

#     # Prompt for data input and validate against the schema
#     for col in "${columns[@]}"; do
#         name=$(echo "$col" | cut -d: -f1)
#         type=$(echo "$col" | cut -d: -f2)

#         # Skip the primary_key indicator in schema
#         if [[ "$name" == "primary_key" ]]; then
#             continue
#         fi

#         while true; do
#             read -p "Enter value for $name ($type): " value
#             if validate_value "$value" "$type"; then
#                 if [[ "$name" == "$primary_key" ]]; then
#                     primary_key_value="$value"
#                     # Check if primary key value is unique
#                     if cut -d';' -f1 "$tablename" | grep -q "^$primary_key_value$"; then
#                         echo "Primary key value '$primary_key_value' already exists. Please enter a unique value."
#                         continue
#                     fi
#                 fi
#                 data["$name"]="$value"
#                 break
#             else
#                 echo "Invalid value for type '$type'. Please try again."
#             fi
#         done
#     done

#     # Construct the data line to be inserted
#     local dataline=""
#     for col in "${columns[@]}"; do
#         name=$(echo "$col" | cut -d: -f1)
#         if [[ "$name" != "primary_key" ]]; then
#             dataline+="${data[$name]};"
#         fi
#     done
#     dataline=${dataline%;} # Remove the trailing semicolon

#     # Append the data line to the table file
#     echo "$dataline" >> "$tablename"
#     echo "Data inserted successfully into '$tablename'."

#     sleep 2
#     cd ..
#     mainmenu
# }
##############################################################################################
drop_table() {

    DBName="$1"
    ##tables=$(ls Database/$DBName | grep -v "_metaData")
    ##
    Tables2=($(ls "Database/$DBName" | grep -v "_metaData"))
    optionsTables3=()
    for ((l = 0; l < ${#Tables2[@]}; l++)); do
        optionsTables3+=("${Tables2[$l]}")
    done

    TableName3=$(zenity --width=300 --height=300 --list --title="Select Tables in ${DBName}" --column="Tables" "${optionsTables3[@]}" \
        --text="Select Table in ${DBName}")
    ##
    ##TableName=$(zenity --width=300 --height=300 --entry --title="Drop Table" --text="Enter the name of the table:")
    if [ $? -eq 0 ]; then
        if [ -n "$TableName3" ]; then
            for file in $TableName3; do
                if [ "$TableName3" == "$file" ]; then
                    rm Database/$DBName/$TableName3
                    rm "Database/$DBName/${TableName3}_metaData"
                    zenity --width=300 --height=150 --info --title="Table Dropped" --text="Table $TableName3 dropped successfully in $DBName database."
                    break
                else
                    zenity --width=300 --height=150 --error --title="Table Not Found" --text="Table $TableName3 does not exist."
                    break
                fi
            done
        else
            zenity --width=300 --height=150 --error --title="Error" --text="You did not select table.❌"
        fi
    else
        menu
    fi
}

