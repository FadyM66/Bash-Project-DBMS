insert_into_table() {
    local DBName="$1"
    local TableName="$2"

    # Check if the database and table exist
    if [[ ! -f "Database/$DBName/${TableName}_metaData" || ! -f "Database/$DBName/${TableName}" ]]; then
        echo "Error: Database or table not found."
        return
    fi

    local numOfFields
    numOfFields=$(awk -F: 'END {print NR}' "Database/$DBName/${TableName}_metaData")
    local Name
    local DataType
    local PK

    # Read field names, data types, and primary key information
    Name=($(awk -F: '{print $1}' "Database/$DBName/${TableName}_metaData"))
    DataType=($(awk -F: '{print $2}' "Database/$DBName/${TableName}_metaData"))
    PK=($(awk -F: '{print ($3 == "" ? "x" : $3)}' "Database/$DBName/${TableName}_metaData"))

    for ((i = 0; i < numOfFields; i++)); do
        while true; do
            read -p "Enter value for ${Name[$i]}: " FieldName

            # Validate integer data type
            if [[ ${DataType[$i]} == "int" ]]; then
                checkValue=$(check_is_int "$FieldName")
                if [[ $checkValue == 1 ]]; then
                    echo "Invalid input. Please enter an integer for ${Name[$i]}."
                    continue
                fi
            elif [[ ${DataType[$i]} == "string" ]]; then
                # Replace spaces with underscores for string fields
                FieldName=$(tr -s ' ' '_' <<< "$FieldName")
            fi

            # Handle primary key uniqueness check
            if [[ ${PK[$i]} == "pk" ]]; then
                flag=0
                values=($(awk -F: -v col=$((i+1)) '{print $col}' "Database/$DBName/$TableName"))
                for value in "${values[@]}"; do
                    if [[ $FieldName == $value ]]; then
                        flag=1
                        break
                    fi
                done

                if [[ $flag == 1 ]]; then
                    echo "Error: Value for ${Name[$i]} must be unique. It is a primary key."
                    continue
                fi
            fi

            # Append field value to the table
            if [[ $i == 0 ]]; then
                echo -n "$FieldName" >> "Database/$DBName/${TableName}"
            else
                echo -n ":$FieldName" >> "Database/$DBName/${TableName}"
            fi

            break
        done
    done

    # Add a newline at the end of the record
    echo "" >> "Database/$DBName/${TableName}"
    echo "Record inserted successfully."
}

